import {represent} from '@openhud/helpers';

// Generated with following code
/*
const fs = require('fs');
const Combinatorics = require('js-combinatorics');
const {represent} = require('@openhud/helpers');

const filename = 'heordering.txt';

const lines = fs.readFileSync(filename, 'utf-8')
    .split('\n');

const handReps = lines.slice(8, -1).map(handRep => {
    if (handRep[0] === '(') {
        return `${handRep[1]}${handRep[2]}s`;
    } else if (handRep[0] !== handRep[1]) {
        return `${handRep[0]}${handRep[1]}o`;
    } else {
        return handRep;
    }
});

const handRepRanks = new Map();
for (let i = 0; i < handReps.length; ++i) {
    handRepRanks.set(handReps[i], i);
}


const deck = Combinatorics.cartesianProduct(['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'], ['s', 'c', 'd', 'h']).map(x => x.join(''));

const handCmb = Combinatorics.bigCombination(deck, 2);
const histogram = new Map();
let numHands = 0;
let hand;
while (hand = handCmb.next()) {
    ++numHands;
    const handRep = represent({hand});
    const rank = handRepRanks.get(handRep);
    histogram.set(rank, (histogram.get(rank) || 0) + 1);
}

const reverseHandReps = handReps.slice().reverse();

const percentiles = new Map();
let countSoFar = 0;
reverseHandReps.forEach(handRep => {
    const rank = handRepRanks.get(handRep);
    const count = histogram.get(rank);
    countSoFar += count;
    percentiles.set(handRep, countSoFar / numHands);
});

JSON.stringify([...percentiles.entries()]);
*/
const percentiles = new Map([
  ["72o",0.00904977375565611],["32o",0.01809954751131222],["62o",0.027149321266968326],["82o",0.03619909502262444],["83o",0.04524886877828054],["42o",0.05429864253393665],["52o",0.06334841628959276],["73o",0.07239819004524888],["92o",0.08144796380090498],["63o",0.09049773755656108],["93o",0.09954751131221719],["T2o",0.1085972850678733],["94o",0.11764705882352941],["43o",0.12669683257918551],["T3o",0.13574660633484162],["84o",0.14479638009049775],["74o",0.15384615384615385],["53o",0.16289592760180996],["J2o",0.17194570135746606],["64o",0.18099547511312217],["T4o",0.19004524886877827],["T5o",0.19909502262443438],["J3o",0.2081447963800905],["72s",0.21116138763197587],["95o",0.22021116138763197],["32s",0.22322775263951736],["85o",0.23227752639517346],["62s",0.23529411764705882],["J4o",0.24434389140271492],["54o",0.25339366515837103],["75o",0.26244343891402716],["Q2o",0.27149321266968324],["83s",0.27450980392156865],["42s",0.277526395173454],["82s",0.28054298642533937],["T6o",0.2895927601809955],["J5o",0.2986425339366516],["65o",0.3076923076923077],["52s",0.31070889894419307],["Q3o",0.31975867269984914],["J6o",0.3288084464555053],["73s",0.33182503770739064],["96o",0.34087481146304677],["92s",0.3438914027149321],["Q4o",0.35294117647058826],["76o",0.36199095022624433],["93s",0.3650075414781297],["T2s",0.3680241327300151],["86o",0.3770739064856712],["Q5o",0.3861236802413273],["63s",0.3891402714932127],["43s",0.39215686274509803],["84s",0.3951734539969834],["T7o",0.4042232277526395],["94s",0.4072398190045249],["K2o",0.416289592760181],["T3s",0.4193061840120664],["Q6o",0.42835595776772245],["53s",0.43137254901960786],["J7o",0.44042232277526394],["97o",0.4494720965309201],["74s",0.45248868778280543],["J2s",0.4555052790346908],["K3o",0.4645550527903469],["Q7o",0.473604826546003],["87o",0.48265460030165913],["T5s",0.4856711915535445],["T4s",0.48868778280542985],["64s",0.4917043740573152],["J3s",0.4947209653092006],["K4o",0.5037707390648567],["95s",0.5067873303167421],["85s",0.5098039215686274],["98o",0.5188536953242836],["T8o",0.5279034690799397],["J4s",0.530920060331825],["J8o",0.5399698340874811],["54s",0.5429864253393665],["Q8o",0.5520361990950227],["75s",0.555052790346908],["K5o",0.5641025641025641],["65s",0.5671191553544495],["T6s",0.5701357466063348],["Q2s",0.5731523378582202],["Q3s",0.5761689291101055],["K6o",0.5852187028657617],["J5s",0.5882352941176471],["J6s",0.5912518853695324],["96s",0.5942684766214178],["86s",0.5972850678733032],["K7o",0.6063348416289592],["76s",0.6093514328808446],["Q4s",0.6123680241327301],["A2o",0.6214177978883861],["K8o",0.6304675716440422],["22",0.6349924585218703],["T9o",0.6440422322775264],["J9o",0.6530920060331825],["A3o",0.6621417797888386],["Q5s",0.665158371040724],["97s",0.6681749622926093],["A6o",0.6772247360482655],["J7s",0.6802413273001509],["K2s",0.6832579185520362],["Q6s",0.6862745098039216],["T7s",0.6892911010558069],["Q7s",0.6923076923076923],["87s",0.6953242835595776],["Q9o",0.7043740573152338],["A4o",0.7134238310708899],["K3s",0.7164404223227753],["33",0.7209653092006033],["A5o",0.7300150829562594],["K9o",0.7390648567119156],["K4s",0.7420814479638009],["A7o",0.751131221719457],["K5s",0.7541478129713424],["T8s",0.7571644042232277],["98s",0.7601809954751131],["K6s",0.7631975867269984],["J8s",0.7662141779788839],["JTo",0.77526395173454],["Q8s",0.7782805429864253],["QTo",0.7873303167420814],["A8o",0.7963800904977375],["44",0.8009049773755657],["K7s",0.803921568627451],["A2s",0.8069381598793364],["K8s",0.8099547511312217],["T9s",0.8129713423831071],["A9o",0.8220211161387632],["QJo",0.8310708898944194],["KTo",0.8401206636500754],["J9s",0.8431372549019608],["A3s",0.8461538461538461],["Q9s",0.8491704374057315],["55",0.8536953242835595],["A6s",0.8567119155354449],["A4s",0.8597285067873304],["K9s",0.8627450980392157],["A5s",0.8657616892911011],["A7s",0.8687782805429864],["KJo",0.8778280542986425],["JTs",0.8808446455505279],["QTs",0.8838612368024132],["A8s",0.8868778280542986],["66",0.8914027149321267],["ATo",0.9004524886877828],["A9s",0.9034690799396682],["KQo",0.9125188536953243],["KTs",0.9155354449472096],["QJs",0.918552036199095],["KJs",0.9215686274509803],["77",0.9260935143288085],["AJo",0.9351432880844646],["KQs",0.9381598793363499],["ATs",0.9411764705882353],["88",0.9457013574660633],["AQo",0.9547511312217195],["AJs",0.9577677224736049],["99",0.9622926093514329],["AQs",0.9653092006033183],["AKo",0.9743589743589743],["TT",0.9788838612368024],["AKs",0.9819004524886877],["JJ",0.9864253393665159],["QQ",0.9909502262443439],["KK",0.995475113122172],["AA",1]
]);


const texasHoldem10 = ({hand}) => {
    if (!hand || hand.length !== 2) {
        throw new Error('Invalid texas holdem hand');
    }

    const handRep = represent({hand});
    return {percentile: percentiles.get(handRep)};

  };

export default texasHoldem10;