import {represent} from '@openhud/helpers';

// Generated with following code
/*
const fs = require('fs');
const Combinatorics = require('js-combinatorics');
const {represent} = require('@openhud/helpers');

const filename = 'he6maxordering.txt';

const lines = fs.readFileSync(filename, 'utf-8')
    .split('\n');

const handReps = lines.slice(8, -1).map(handRep => {
    if (handRep[0] === '(') {
        return `${handRep[1]}${handRep[2]}s`;
    } else if (handRep[0] !== handRep[1]) {
        return `${handRep[0]}${handRep[1]}o`;
    } else {
        return handRep;
    }
});

const handRepRanks = new Map();
for (let i = 0; i < handReps.length; ++i) {
    handRepRanks.set(handReps[i], i);
}


const deck = Combinatorics.cartesianProduct(['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'], ['s', 'c', 'd', 'h']).map(x => x.join(''));

const handCmb = Combinatorics.bigCombination(deck, 2);
const histogram = new Map();
let numHands = 0;
let hand;
while (hand = handCmb.next()) {
    ++numHands;
    const handRep = represent({hand});
    const rank = handRepRanks.get(handRep);
    histogram.set(rank, (histogram.get(rank) || 0) + 1);
}

const reverseHandReps = handReps.slice().reverse();

const percentiles = new Map();
let countSoFar = 0;
reverseHandReps.forEach(handRep => {
    const rank = handRepRanks.get(handRep);
    const count = histogram.get(rank);
    countSoFar += count;
    percentiles.set(handRep, countSoFar / numHands);
});

JSON.stringify([...percentiles.entries()]);
*/
const percentiles = new Map([
  ["32o",0.00904977375565611],["72o",0.01809954751131222],["62o",0.027149321266968326],["42o",0.03619909502262444],["82o",0.04524886877828054],["52o",0.05429864253393665],["83o",0.06334841628959276],["73o",0.07239819004524888],["92o",0.08144796380090498],["63o",0.09049773755656108],["43o",0.09954751131221719],["93o",0.1085972850678733],["94o",0.11764705882352941],["53o",0.12669683257918551],["T2o",0.13574660633484162],["84o",0.14479638009049775],["74o",0.15384615384615385],["T3o",0.16289592760180996],["32s",0.16591251885369532],["72s",0.1689291101055807],["64o",0.1779788838612368],["62s",0.18099547511312217],["T4o",0.19004524886877827],["42s",0.19306184012066366],["J2o",0.20211161387631976],["54o",0.21116138763197587],["95o",0.22021116138763197],["82s",0.22322775263951736],["T5o",0.23227752639517346],["85o",0.24132730015082957],["J3o",0.25037707390648567],["52s",0.25339366515837103],["83s",0.2564102564102564],["75o",0.2654600301659125],["73s",0.2684766214177979],["J4o",0.277526395173454],["43s",0.28054298642533937],["65o",0.2895927601809955],["92s",0.29260935143288086],["63s",0.2956259426847662],["Q2o",0.3046757164404223],["96o",0.3137254901960784],["93s",0.3167420814479638],["J5o",0.3257918552036199],["86o",0.334841628959276],["Q3o",0.3438914027149321],["53s",0.3469079939668175],["T6o",0.3559577677224736],["94s",0.358974358974359],["T2s",0.36199095022624433],["84s",0.3650075414781297],["J6o",0.3740573152337858],["76o",0.38310708898944196],["Q4o",0.39215686274509803],["74s",0.3951734539969834],["T3s",0.39819004524886875],["64s",0.40120663650075417],["T4s",0.4042232277526395],["Q5o",0.4132730015082956],["97o",0.42232277526395173],["J2s",0.4253393665158371],["54s",0.42835595776772245],["87o",0.4374057315233786],["K2o",0.4464555052790347],["T7o",0.4555052790346908],["T5s",0.45852187028657615],["85s",0.46153846153846156],["95s",0.4645550527903469],["J7o",0.473604826546003],["K3o",0.48265460030165913],["J3s",0.4856711915535445],["Q6o",0.4947209653092006],["75s",0.497737556561086],["Q7o",0.5067873303167421],["J4s",0.5098039215686274],["65s",0.5128205128205128],["K4o",0.521870286576169],["98o",0.530920060331825],["Q2s",0.5339366515837104],["T8o",0.5429864253393665],["J5s",0.5460030165912518],["J8o",0.555052790346908],["96s",0.5580693815987934],["K5o",0.5671191553544495],["Q3s",0.5701357466063348],["T6s",0.5731523378582202],["76s",0.5761689291101055],["86s",0.579185520361991],["Q8o",0.5882352941176471],["J6s",0.5912518853695324],["K6o",0.6003016591251885],["Q4s",0.6033182503770739],["22",0.6078431372549019],["K7o",0.6168929110105581],["97s",0.6199095022624435],["Q5s",0.6229260935143288],["T9o",0.6319758672699849],["87s",0.6349924585218703],["T7s",0.6380090497737556],["J9o",0.6470588235294118],["K8o",0.6561085972850679],["J7s",0.6591251885369532],["A2o",0.6681749622926093],["K2s",0.6711915535444947],["K3s",0.6742081447963801],["Q9o",0.6832579185520362],["Q6s",0.6862745098039216],["Q7s",0.6892911010558069],["A3o",0.698340874811463],["K4s",0.7013574660633484],["98s",0.7043740573152338],["33",0.7088989441930619],["A4o",0.717948717948718],["T8s",0.7209653092006033],["J8s",0.7239819004524887],["K5s",0.726998491704374],["A6o",0.7360482654600302],["K9o",0.7450980392156863],["Q8s",0.7481146304675717],["JTo",0.7571644042232277],["A5o",0.7662141779788839],["K6s",0.7692307692307693],["A7o",0.7782805429864253],["QTo",0.7873303167420814],["T9s",0.7903469079939668],["K7s",0.7933634992458521],["44",0.7978883861236803],["J9s",0.8009049773755657],["K8s",0.803921568627451],["A2s",0.8069381598793364],["Q9s",0.8099547511312217],["QJo",0.8190045248868778],["A8o",0.8280542986425339],["A3s",0.8310708898944194],["KTo",0.8401206636500754],["A4s",0.8431372549019608],["K9s",0.8461538461538461],["55",0.8506787330316742],["JTs",0.8536953242835595],["A6s",0.8567119155354449],["A9o",0.8657616892911011],["A5s",0.8687782805429864],["QTs",0.8717948717948718],["KJo",0.8808446455505279],["A7s",0.8838612368024132],["QJs",0.8868778280542986],["A8s",0.889894419306184],["66",0.8944193061840121],["KTs",0.8974358974358975],["A9s",0.9004524886877828],["KQo",0.9095022624434389],["ATo",0.918552036199095],["KJs",0.9215686274509803],["77",0.9260935143288085],["KQs",0.9291101055806938],["AJo",0.9381598793363499],["ATs",0.9411764705882353],["88",0.9457013574660633],["AQo",0.9547511312217195],["AJs",0.9577677224736049],["99",0.9622926093514329],["AQs",0.9653092006033183],["AKo",0.9743589743589743],["AKs",0.9773755656108597],["TT",0.9819004524886877],["JJ",0.9864253393665159],["QQ",0.9909502262443439],["KK",0.995475113122172],["AA",1]
]);


const texasHoldem6 = ({hand}) => {
    if (!hand || hand.length !== 2) {
        throw new Error('Invalid texas holdem hand');
    }

    const handRep = represent({hand});
    return {percentile: percentiles.get(handRep)};

  };

export default texasHoldem6;